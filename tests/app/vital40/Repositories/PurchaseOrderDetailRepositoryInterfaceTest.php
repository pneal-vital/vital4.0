<?php namespace tests\App\vital40\Receive;

use vital40\Repositories\DBPurchaseOrderDetailRepository;
use vital40\Repositories\PurchaseOrderDetailRepositoryInterface;

class PurchaseOrderDetailRepositoryInterfaceTest extends \PHPUnit_Framework_TestCase {

    protected static $PurchaseOrderDetail_objectID = '6232063905';

    protected $purchaseOrderDetailRepositoryInterface;

    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        fwrite(STDOUT, __METHOD__ . "(" . __LINE__ . ")\n");
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        fwrite(STDOUT, __METHOD__."(".__LINE__.")\n");

        $purchaseOrderDetailRepositoryInterface = DBPurchaseOrderDetailRepository();
        fwrite(STDOUT, __METHOD__."(".__LINE__."):  ".var_dump($purchaseOrderDetailRepositoryInterface));
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        fwrite(STDOUT, __METHOD__."(".__LINE__.")\n");

        $purchaseOrderDetailRepositoryInterface = null;
    }

    public static function tearDownAfterClass()
    {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
        fwrite(STDOUT, __METHOD__ . "(" . __LINE__ . ")\n");
    }

    public function testGetAll()
    {
        fwrite(STDOUT, __METHOD__."(".__LINE__.")\n");

        // testing public function getAll($limit=10);

        $pod = $this->purchaseOrderDetailRepositoryInterface->getAll(1);

        $this->assertEquals(self::$PurchaseOrderDetail_objectID, $pod->objectID);
    }

    public function testFind()
    {
        fwrite(STDOUT, __METHOD__."(".__LINE__.")\n");

        // testing public function find($id);

        // Set up the expectation for the associate() method
        // to be called only once and with three strings as its parameters.
        self::$userActivityRepository->expects($this->once())
            ->method('associate')
            ->with($this->equalTo(self::$Location_Name), $this->equalTo(ConfigMock::$expectedKeys['ReceiveLocation']), $this->equalTo(LangMock::$expectedKeys['ReceiveLocation']));

        // invoke method
        $this->articleFlow->selectLocation($this->location);

        // assert on results
        $this->assertEquals(ConfigMock::$expectedKeys['ReceiveLocation'], ConfigMock::$key);
        $this->assertEquals(1, ConfigMock::$count);
        $this->assertEquals(LangMock::$expectedKeys['ReceiveLocation'], LangMock::$key);
        $this->assertEquals(1, LangMock::$count);
    }

    public function testFilterOn()
    {
        fwrite(STDOUT, __METHOD__."(".__LINE__.")\n");

        // testing public function filterOn($input, $limit=10);

        // Set up the expectation for the associate() method
        // to be called only once and with three strings as its parameters.
        self::$userActivityRepository->expects($this->once())
            ->method('associate')
            ->with($this->equalTo(self::$PurchaseOrderDetail_objectID), $this->equalTo(ConfigMock::$expectedKeys['ReceiveArticle']), $this->equalTo(LangMock::$expectedKeys['ReceiveArticle']));

        // invoke method
        $this->articleFlow->selectArticle($this->purchaseOrderDetail, $this->article);

        // assert on results
        $this->assertEquals(ConfigMock::$expectedKeys['ReceiveArticle'], ConfigMock::$key);
        $this->assertEquals(1, ConfigMock::$count);
        $this->assertEquals(LangMock::$expectedKeys['ReceiveArticle'], LangMock::$key);
        $this->assertEquals(1, LangMock::$count);
    }

    public function testUpdate()
    {
        fwrite(STDOUT, __METHOD__."(".__LINE__.")\n");

        // testing public function update($id, $input);

        // Set up the expectation for the associate() method
        // to be called only once and with three strings as its parameters.
        self::$purchaseOrderDetailRepository->expects($this->once())
            ->method('find')
            ->with(self::$PurchaseOrderDetail_objectID)
            ->willReturn($this->purchaseOrderDetail);

        self::$purchaseOrderDetailRepository->expects($this->once())
            ->method('update')
            ->with($this->purchaseOrderDetail, ['Location' => self::$Location_objectID]);

        // invoke method
        $this->articleFlow->setPurchaseOrderDetailLocation(self::$PurchaseOrderDetail_objectID, self::$Location_objectID);
    }

}
